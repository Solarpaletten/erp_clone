// f/src/services/companyService.ts
// ===============================================
// üèóÔ∏è COMPANY SERVICE –î–õ–Ø –î–í–£–•–£–†–û–í–ù–ï–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´
// ===============================================

import { api } from '../../api/axios'; // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ axios

export interface Company {
  id: number;
  code: string;
  name: string;
  short_name?: string;
  description?: string;
  status?: string;
  created_at?: string;
  is_active?: boolean;
  clientsCount?: number;
  salesCount?: number;
  productsCount?: number;
  owner?: {
    id: number;
    email: string;
    first_name: string;
    last_name: string;
  };
}

export interface CompaniesResponse {
  success: boolean;
  companies: Company[];
  count: number;
}

export const companyService = {
  // ===============================================
  // üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π (Account Level)
  // ===============================================
  getCompanies: async (): Promise<CompaniesResponse> => {
    console.log('üè¢ Getting companies...');
    
    try {
      const response = await api.get<CompaniesResponse>('/api/account/companies/stats');
      console.log('‚úÖ Companies loaded from API:', response.data.companies?.length || 0);
      return response.data;
    } catch (error) {
      console.error('‚ùå Error fetching companies:', error);
      throw new Error('Failed to fetch companies');
    }
  },

  // ===============================================
  // üéØ –í—ã–±—Ä–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
  // ===============================================
  selectCompany: async (companyId: number): Promise<{ success: boolean; companyId: number }> => {
    console.log(`üéØ Selecting company ID: ${companyId}`);
    
    try {
      // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem('currentCompanyId', companyId.toString());
      localStorage.setItem('companySelectedAt', new Date().toISOString());
      
      console.log(`‚úÖ Company ${companyId} saved to localStorage`);
      
      // 2. –û–±–Ω–æ–≤–ª—è–µ–º axios headers
      api.defaults.headers['x-company-id'] = companyId.toString();
      
      console.log(`‚úÖ x-company-id header set to: ${companyId}`);
      
      // 3. –£–≤–µ–¥–æ–º–ª—è–µ–º backend –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏
      try {
        await api.post('/api/account/switch-to-company', {
          companyId: companyId
        });
        console.log('‚úÖ Backend notified about company selection');
      } catch (error) {
        console.warn('‚ö†Ô∏è Failed to notify backend, but continuing...', error);
      }
      
      return { success: true, companyId };
      
    } catch (error) {
      console.error('‚ùå Error selecting company:', error);
      throw error;
    }
  },

  // ===============================================
  // üìã –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
  // ===============================================
  getCurrentCompany: (): { id: number; selectedAt: Date } | null => {
    const companyId = localStorage.getItem('currentCompanyId');
    const selectedAt = localStorage.getItem('companySelectedAt');
    
    if (companyId) {
      console.log(`üìã Current company: ${companyId} (selected at ${selectedAt})`);
      return {
        id: parseInt(companyId),
        selectedAt: selectedAt ? new Date(selectedAt) : new Date()
      };
    }
    
    console.log('üìã No company currently selected');
    return null;
  },

  // ===============================================
  // üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Account Level)
  // ===============================================
  clearCompanySelection: (): void => {
    console.log('üßπ Clearing company selection');
    
    localStorage.removeItem('currentCompanyId');
    localStorage.removeItem('currentCompanyName');
    localStorage.removeItem('companySelectedAt');
    
    // –£–±–∏—Ä–∞–µ–º header –∏–∑ axios
    if (api.defaults.headers['x-company-id']) {
      delete api.defaults.headers['x-company-id'];
    }
    
    console.log('‚úÖ Company selection cleared');
  },

  // ===============================================
  // üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
  // ===============================================
  createCompany: async (companyData: Partial<Company>): Promise<Company> => {
    console.log('üÜï Creating new company...', companyData);
    
    try {
      const response = await api.post<{success: boolean, company: Company}>('/api/account/companies', companyData);
      
      if (response.data.success && response.data.company) {
        console.log('‚úÖ Company created:', response.data.company);
        return response.data.company;
      } else {
        throw new Error('Failed to create company');
      }
    } catch (error: any) {
      console.error('‚ùå Error creating company:', error);
      
      if (error.response?.data?.error) {
        throw new Error(error.response.data.error);
      } else if (error.response?.status === 409) {
        throw new Error('Company with this code already exists');
      } else {
        throw new Error('Failed to create company. Please try again.');
      }
    }
  },

  // ===============================================
  // üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  // ===============================================
  restoreCompanyContext: (): boolean => {
    const currentCompany = companyService.getCurrentCompany();
    
    if (currentCompany) {
      api.defaults.headers['x-company-id'] = currentCompany.id.toString();
      
      console.log(`üîÑ Company context restored: ${currentCompany.id}`);
      return true;
    }
    
    console.log('üîÑ No company context to restore');
    return false;
  }
};

// ===============================================
// üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê –ü–†–ò –ò–ú–ü–û–†–¢–ï
// ===============================================
companyService.restoreCompanyContext();

export default companyService;