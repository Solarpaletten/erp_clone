// =====================================================
// üìù TYPESCRIPT –¢–ò–ü–´ –î–õ–Ø –ì–ò–ë–ö–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø
// frontend/src/types/flexibleCopyTypes.ts
// =====================================================

// üéØ –ó–ê–ü–†–û–° –ù–ê –ì–ò–ë–ö–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï
export interface FlexibleCopyRequest {
    templateId: number;
    templateType: 'purchase' | 'sale' | 'full_operation';
    
    // üéØ –§–õ–ê–ì–ò - –ß–¢–û –ö–û–ü–ò–†–û–í–ê–¢–¨ (–≥–∞–ª–æ—á–∫–∏ –≤ UI)
    copyPurchase: boolean;        // üì¶ –ü—Ä–∏—Ö–æ–¥
    copySale: boolean;           // üí∞ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è  
    copySupplierPayment: boolean; // üí∏ –û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
    copyCustomerPayment: boolean; // üí≥ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    
    // üîß –ò–ó–ú–ï–ù–ï–ù–ò–Ø (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    changes?: {
      // –û–±—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      supplier_id?: number;
      customer_id?: number;
      warehouse_id?: number;
      
      // –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞
      quantity?: number;
      unit_price?: number;
      total_net?: number;
      total_vat?: number;
      total_gross?: number;
      
      // –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
      sale_quantity?: number;
      sale_price?: number;
      sale_net?: number;
      sale_vat?: number;
      sale_gross?: number;
      
      // –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
      supplier_payment_amount?: number;
      customer_payment_amount?: number;
    };
  }
  
  // üéä –û–¢–í–ï–¢ –û–¢ –°–ï–†–í–ï–†–ê
  export interface FlexibleCopyResponse {
    success: boolean;
    message: string;
    
    // üìã –ß–¢–û –ë–´–õ–û –°–û–ó–î–ê–ù–û
    created: {
      purchase: CreatedDocument | null;
      sale: CreatedDocument | null;
      supplierPayment: CreatedDocument | null;
      customerPayment: CreatedDocument | null;
    };
    
    // üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    stats: {
      documentsCreated: number;
      accountingEntriesCreated: number;
      timeSaved: string;
      totalValue: number;
    };
    
    // üéØ –§–õ–ê–ì–ò (–¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
    flags: {
      copyPurchase: boolean;
      copySale: boolean;
      copySupplierPayment: boolean;
      copyCustomerPayment: boolean;
    };
    
    // üìç –ù–ê–í–ò–ì–ê–¶–ò–Ø
    navigation: {
      primaryAction: string | null;
      secondaryActions: string[];
    };
  }
  
  export interface CreatedDocument {
    id: number;
    docNumber: string;
    amount: number;
    client: string;
    editUrl: string;
  }
  
  // üéØ –®–ê–ë–õ–û–ù–´ –î–õ–Ø –í–´–ë–û–†–ê –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï
  export interface TemplatesForCopy {
    success: boolean;
    templates: {
      purchases: TemplateOption[];
      sales: TemplateOption[];
      recent: TemplateOption[];
    };
    defaultFlags: {
      copyPurchase: boolean;
      copySale: boolean;
      copySupplierPayment: boolean;
      copyCustomerPayment: boolean;
    };
  }
  
  export interface TemplateOption {
    id: number;
    name: string;
    amount: number;
    date: string;
    type: 'purchase_template' | 'sale_template' | 'recent_purchase';
  }
  
  // üéØ –°–û–°–¢–û–Ø–ù–ò–ï –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø
  export interface CopyModalState {
    isOpen: boolean;
    selectedTemplate: TemplateOption | null;
    
    // –§–ª–∞–≥–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    flags: {
      copyPurchase: boolean;
      copySale: boolean;
      copySupplierPayment: boolean;
      copyCustomerPayment: boolean;
    };
    
    // –ë—ã—Å—Ç—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    quickChanges: {
      quantity?: number;
      pricePerTon?: number;
      supplier?: { id: number; name: string };
      customer?: { id: number; name: string };
    };
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    isLoading: boolean;
    error: string | null;
  }
  
  // üéØ –ü–†–û–ü–°–´ –î–õ–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
  export interface FlexibleCopyButtonProps {
    templateId: number;
    templateType: 'purchase' | 'sale' | 'full_operation';
    buttonText?: string;
    size?: 'sm' | 'md' | 'lg';
    variant?: 'primary' | 'secondary' | 'outline';
    onSuccess?: (response: FlexibleCopyResponse) => void;
    onError?: (error: string) => void;
  }
  
  export interface CopyModalProps {
    isOpen: boolean;
    onClose: () => void;
    templates: TemplatesForCopy['templates'];
    defaultFlags: TemplatesForCopy['defaultFlags'];
    onCopy: (request: FlexibleCopyRequest) => Promise<void>;
    isLoading: boolean;
    error: string | null;
  }
  
  export interface CopyFlagsProps {
    flags: CopyModalState['flags'];
    onChange: (flags: CopyModalState['flags']) => void;
    disabled?: boolean;
  }
  
  export interface QuickChangesProps {
    changes: CopyModalState['quickChanges'];
    onChange: (changes: CopyModalState['quickChanges']) => void;
    selectedTemplate: TemplateOption | null;
  }
  
  // üéØ –•–£–ö–ò
  export interface UseFlexibleCopy {
    copyWithFlags: (request: FlexibleCopyRequest) => Promise<FlexibleCopyResponse>;
    getTemplates: () => Promise<TemplatesForCopy>;
    isLoading: boolean;
    error: string | null;
    lastResponse: FlexibleCopyResponse | null;
  }
  
  // üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
  export interface CopyStatistics {
    totalCopies: number;
    purchasesCopied: number;
    salesCopied: number;
    paymentsCopied: number;
    timeSavedMinutes: number;
    mostUsedTemplate: {
      id: number;
      name: string;
      useCount: number;
    };
    flagsUsage: {
      copyPurchase: number;
      copySale: number;
      copySupplierPayment: number;
      copyCustomerPayment: number;
    };
  }
  
  // üéØ –°–û–ë–´–¢–ò–Ø –î–õ–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò
  export type CopyEvent = {
    type: 'FLEXIBLE_COPY_STARTED';
    payload: {
      templateId: number;
      flags: FlexibleCopyRequest['flags'];
    };
  } | {
    type: 'FLEXIBLE_COPY_SUCCESS';
    payload: {
      documentsCreated: number;
      timeSaved: string;
    };
  } | {
    type: 'FLEXIBLE_COPY_ERROR';
    payload: {
      error: string;
    };
  } | {
    type: 'COPY_MODAL_OPENED';
    payload: {
      source: 'button' | 'shortcut' | 'menu';
    };
  } | {
    type: 'FLAGS_CHANGED';
    payload: {
      flags: FlexibleCopyRequest['flags'];
    };
  };
  
  export default FlexibleCopyRequest;