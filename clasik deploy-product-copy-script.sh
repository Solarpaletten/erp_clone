#!/bin/bash

# =====================================================
# üöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø –í –°–£–©–ï–°–¢–í–£–Æ–©–£–Æ –¢–ê–ë–õ–ò–¶–£ –ü–†–û–î–£–ö–¢–û–í
# –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ ACTIONS –∫–æ–ª–æ–Ω–∫—É –∑–∞ 30 —Å–µ–∫—É–Ω–¥
# =====================================================

echo "üöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø –í PRODUCTS TABLE..."
echo "‚è∞ Estimated time: 30 seconds"
echo "üìã –†–∞–±–æ—Ç–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π ProductsPage"

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
cd "$(dirname "$0")"

# =====================================================
# 1. –°–û–ó–î–ê–ï–ú –ö–û–ú–ü–û–ù–ï–ù–¢ –ö–ù–û–ü–ö–ò –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø
# =====================================================

echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ ProductCopyButton.tsx..."

mkdir -p frontend/src/components/products

cat > frontend/src/components/products/ProductCopyButton.tsx << 'EOF'
import React, { useState } from 'react';
import { Copy, Loader, Check } from 'lucide-react';
import { toast } from 'react-toastify';

interface ProductCopyButtonProps {
  productId: number;
  productName: string;
  size?: 'sm' | 'md' | 'lg';
  variant?: 'icon' | 'text' | 'full';
  onCopySuccess?: (newProduct: any) => void;
  onCopyError?: (error: string) => void;
  className?: string;
}

const ProductCopyButton: React.FC<ProductCopyButtonProps> = ({
  productId,
  productName,
  size = 'sm',
  variant = 'icon',
  onCopySuccess,
  onCopyError,
  className = ''
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [justCopied, setJustCopied] = useState(false);

  const handleCopy = async () => {
    if (isLoading) return;

    setIsLoading(true);
    
    try {
      const response = await fetch(`/api/company/products/${productId}/copy`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
          'x-company-id': localStorage.getItem('currentCompanyId') || '1'
        }
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
      }

      const result = await response.json();

      if (result.success) {
        setJustCopied(true);
        
        toast.success(`–¢–æ–≤–∞—Ä "${productName}" —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!`, {
          position: "top-right",
          autoClose: 3000,
        });

        setTimeout(() => setJustCopied(false), 2000);

        if (onCopySuccess) {
          onCopySuccess(result.data);
        }

      } else {
        throw new Error(result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }

    } catch (error) {
      console.error('Product copy error:', error);
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞';
      
      toast.error(`–û—à–∏–±–∫–∞: ${errorMessage}`, {
        position: "top-right",
        autoClose: 5000,
      });

      if (onCopyError) {
        onCopyError(errorMessage);
      }
    } finally {
      setIsLoading(false);
    }
  };

  const getSizes = () => {
    switch (size) {
      case 'sm': return { icon: 'w-3 h-3', button: 'p-1.5 text-xs', gap: 'gap-1' };
      case 'lg': return { icon: 'w-5 h-5', button: 'p-3 text-base', gap: 'gap-3' };
      default: return { icon: 'w-4 h-4', button: 'p-2 text-sm', gap: 'gap-2' };
    }
  };

  const sizes = getSizes();

  const getButtonStyles = () => {
    const baseStyles = `inline-flex items-center justify-center rounded-lg transition-all duration-200 font-medium focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed`;
    
    if (variant === 'icon') {
      return `${baseStyles} ${sizes.button} text-gray-600 hover:text-blue-600 hover:bg-blue-50 ${className}`;
    }
    
    if (variant === 'text') {
      return `${baseStyles} ${sizes.button} ${sizes.gap} text-blue-600 hover:text-blue-700 hover:bg-blue-50 ${className}`;
    }
    
    return `${baseStyles} ${sizes.button} ${sizes.gap} bg-gradient-to-r from-blue-500 to-purple-600 text-white hover:from-blue-600 hover:to-purple-700 shadow-md hover:shadow-lg ${className}`;
  };

  const getIcon = () => {
    if (justCopied) {
      return <Check className={`${sizes.icon} text-green-500`} />;
    }
    
    if (isLoading) {
      return <Loader className={`${sizes.icon} animate-spin`} />;
    }
    
    return <Copy className={sizes.icon} />;
  };

  const getText = () => {
    if (justCopied) return '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
    if (isLoading) return '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...';
    return '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
  };

  return (
    <button
      type="button"
      onClick={handleCopy}
      disabled={isLoading}
      className={getButtonStyles()}
      title={`–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä "${productName}"`}
    >
      {getIcon()}
      {(variant === 'text' || variant === 'full') && (
        <span className={justCopied ? 'text-green-600' : ''}>
          {getText()}
        </span>
      )}
    </button>
  );
};

export default ProductCopyButton;
EOF

# =====================================================
# 2. –û–ë–ù–û–í–õ–Ø–ï–ú BACKEND CONTROLLER (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# =====================================================

echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ backend controller..."

# –î–æ–±–∞–≤–ª—è–µ–º copyProduct —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if ! grep -q "copyProduct" backend/src/controllers/company/productsController.js; then
  echo "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ copyProduct –≤ controller..."
  
cat >> backend/src/controllers/company/productsController.js << 'EOF'

// =====================================================
// üîÑ –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –¢–û–í–ê–†–ê
// =====================================================
const copyProduct = async (req, res) => {
  try {
    const { id } = req.params;
    const companyId = req.companyContext.companyId;

    // –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä
    const originalProduct = await prismaManager.client.products.findFirst({
      where: {
        id: parseInt(id),
        company_id: companyId
      }
    });

    if (!originalProduct) {
      return res.status(404).json({
        success: false,
        error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º
    const newCode = `${originalProduct.code}_COPY_${Date.now()}`;
    
    const copiedProduct = await prismaManager.client.products.create({
      data: {
        code: newCode,
        name: `${originalProduct.name} (–ö–æ–ø–∏—è)`,
        description: originalProduct.description,
        category: originalProduct.category,
        unit: originalProduct.unit,
        purchase_price: originalProduct.purchase_price,
        selling_price: originalProduct.selling_price,
        min_stock_level: originalProduct.min_stock_level,
        company_id: companyId,
        is_active: true,
        created_by: req.user.id
      }
    });

    logger.info(`Product copied: ${originalProduct.code} -> ${newCode}`);

    res.json({
      success: true,
      message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω',
      data: copiedProduct
    });

  } catch (error) {
    logger.error('Copy product error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞'
    });
  }
};
EOF

  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —ç–∫—Å–ø–æ—Ä—Ç—ã
  sed -i '' 's/module\.exports = {/module.exports = {\n  copyProduct,/' backend/src/controllers/company/productsController.js
fi

# =====================================================
# 3. –û–ë–ù–û–í–õ–Ø–ï–ú ROUTES (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# =====================================================

echo "üõ£Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ routes..."

if ! grep -q "/copy" backend/src/routes/company/productsRoutes.js; then
  echo "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ copy route..."
  
  # –î–æ–±–∞–≤–ª—è–µ–º route –ø–µ—Ä–µ–¥ module.exports
  sed -i '' '/module\.exports/i\
// üîÑ POST /api/company/products/:id/copy - –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä\
router.post("/:id/copy", productsController.copyProduct);\
' backend/src/routes/company/productsRoutes.js
fi

# =====================================================
# 4. –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ó–ê–í–ò–°–ò–ú–û–°–¢–ò
# =====================================================

echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ react-toastify..."

cd frontend
if ! npm list react-toastify &>/dev/null; then
  npm install react-toastify
fi
cd ..

# =====================================================
# 5. –°–û–ó–î–ê–ï–ú –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ô –§–ê–ô–õ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
# =====================================================

echo "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏..."

cat > frontend/src/components/products/ProductsTableExample.tsx << 'EOF'
// –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ProductCopyButton –≤ —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤

import React from 'react';
import { Edit, Trash2, Eye } from 'lucide-react';
import ProductCopyButton from './ProductCopyButton';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

// –í ACTIONS –∫–æ–ª–æ–Ω–∫–µ –¥–æ–±–∞–≤—å—Ç–µ:

const ActionsColumn: React.FC<{ product: any, onRefresh: () => void }> = ({ product, onRefresh }) => {
  return (
    <div className="flex items-center gap-2">
      {/* –ö–ù–û–ü–ö–ê –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø */}
      <ProductCopyButton
        productId={product.id}
        productName={product.name}
        size="sm"
        variant="icon"
        onCopySuccess={(newProduct) => {
          console.log('–¢–æ–≤–∞—Ä —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω:', newProduct);
          onRefresh(); // –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
        }}
        className="hover:bg-blue-50"
      />
      
      {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */}
      <button className="p-1.5 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded-lg">
        <Eye className="w-3 h-3" />
      </button>
      
      <button className="p-1.5 text-gray-600 hover:text-indigo-600 hover:bg-indigo-50 rounded-lg">
        <Edit className="w-3 h-3" />
      </button>
      
      <button className="p-1.5 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-lg">
        <Trash2 className="w-3 h-3" />
      </button>
    </div>
  );
};

// –ù–ï –ó–ê–ë–£–î–¨–¢–ï –î–û–ë–ê–í–ò–¢–¨ ToastContainer –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
// <ToastContainer />
EOF

# =====================================================
# 6. –°–û–ó–î–ê–ï–ú –ò–ù–°–¢–†–£–ö–¶–ò–Æ –ü–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
# =====================================================

cat > INTEGRATION_GUIDE.md << 'EOF'
# üöÄ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–î–£–ö–¢–û–í

## –ß—Ç–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ:
1. ‚úÖ ProductCopyButton.tsx - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
2. ‚úÖ Backend copyProduct —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞
3. ‚úÖ Route POST /:id/copy –¥–æ–±–∞–≤–ª–µ–Ω
4. ‚úÖ react-toastify —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

## –ö–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å:

### 1. –í –≤–∞—à–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤:
```typescript
import ProductCopyButton from '../components/products/ProductCopyButton';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
```

### 2. –í –∫–æ–ª–æ–Ω–∫–µ ACTIONS –¥–æ–±–∞–≤—å—Ç–µ:
```typescript
<ProductCopyButton
  productId={product.id}
  productName={product.name}
  size="sm"
  variant="icon"
  onCopySuccess={(newProduct) => {
    // –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    refetchProducts();
  }}
/>
```

### 3. –î–æ–±–∞–≤—å—Ç–µ ToastContainer –≤ –∫–æ—Ä–µ–Ω—å App.tsx:
```typescript
<ToastContainer />
```

## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É Products
2. –ù–∞–π–¥–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∫–æ–Ω–∫–∞ Copy) –≤ –∫–æ–ª–æ–Ω–∫–µ ACTIONS
3. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –Ω–µ—ë
4. –î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
5. –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º —Ç–æ–≤–∞—Ä–æ–º
EOF

# =====================================================
# 7. –†–ï–ó–£–õ–¨–¢–ê–¢
# =====================================================

echo ""
echo "‚úÖ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
echo "‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~30 —Å–µ–∫—É–Ω–¥"
echo ""
echo "üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
echo "  - frontend/src/components/products/ProductCopyButton.tsx"
echo "  - frontend/src/components/products/ProductsTableExample.tsx"
echo "  - INTEGRATION_GUIDE.md"
echo ""
echo "üîß –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
echo "  - backend/src/controllers/company/productsController.js"
echo "  - backend/src/routes/company/productsRoutes.js"
echo ""
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:"
echo "  - react-toastify"
echo ""
echo "üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:"
echo "  1. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ ProductCopyButton –≤ –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É"
echo "  2. –î–æ–±–∞–≤—å—Ç–µ ToastContainer –≤ App.tsx"
echo "  3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
echo ""
echo "üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ —Ñ–∞–π–ª–µ: INTEGRATION_GUIDE.md"
echo ""
echo "üöÄ –ö–û–°–ú–ò–ß–ï–°–ö–ò–ô –ö–û–†–ê–ë–õ–¨ –ì–û–¢–û–í –ö –ü–û–õ–ï–¢–£!"