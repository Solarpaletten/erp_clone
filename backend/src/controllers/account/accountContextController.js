// b/src/controllers/accountContextController.js
const prismaManager = require('../../utils/prismaManager');
const { logger } = require('../../config/logger');

/**
 * üîÑ ACCOUNT CONTEXT CONTROLLER
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–µ–∂–¥—É Account Level –∏ Company Level
 */

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é (Account ‚Üí Company Level)
const switchToCompany = async (req, res) => {
  try {
    const { companyId } = req.body;
    const userId = req.user.id;

    logger.info('Account Context: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é', {
      userId,
      companyId
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏
    const access = await prismaManager.getAccountPrisma().company_users.findFirst({
      where: {
        user_id: userId,
        company_id: parseInt(companyId)
      },
      include: {
        company: {
          select: {
            id: true,
            name: true,
            code: true,
            description: true
          }
        }
      }
    });

    if (!access) {
      return res.status(403).json({
        success: false,
        error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    try {
      const companyPrisma = prismaManager.getCompanyPrisma(companyId);
      
      const [clientsCount, salesCount, productsCount, recentSales] = await Promise.all([
        companyPrisma.clients.count(),
        companyPrisma.sales.count(),
        companyPrisma.products.count(),
        companyPrisma.sales.findMany({
          take: 5,
          orderBy: { created_at: 'desc' },
          include: {
            client: {
              select: { name: true }
            }
          }
        })
      ]);

      res.json({
        success: true,
        data: {
          company: access.company,
          userRole: access.role,
          userPermissions: access.permissions,
          dashboardData: {
            metrics: {
              clients: clientsCount,
              sales: salesCount,
              products: productsCount
            },
            recentSales: recentSales
          }
        },
        message: `–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é: ${access.company.name}`
      });

    } catch (companyError) {
      logger.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏, –Ω–æ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω:', companyError);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –º–µ—Ç—Ä–∏–∫
      res.json({
        success: true,
        data: {
          company: access.company,
          userRole: access.role,
          userPermissions: access.permissions,
          dashboardData: {
            metrics: { clients: 0, sales: 0, products: 0 },
            recentSales: []
          }
        },
        message: `–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é: ${access.company.name}`
      });
    }

  } catch (error) {
    logger.error('Account Context: –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é'
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
const getAvailableCompanies = async (req, res) => {
  try {
    const userId = req.user.id;

    logger.info('Account Context: –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π', { userId });

    const companies = await prismaManager.getAccountPrisma().companies.findMany({
      where: {
        company_users: {
          some: {
            user_id: userId
          }
        }
      },
      include: {
        company_users: {
          where: { user_id: userId },
          select: { role: true }
        }
      },
      select: {
        id: true,
        name: true,
        code: true,
        description: true,
        company_users: true
      },
      orderBy: { name: 'asc' }
    });

    res.json({
      success: true,
      data: {
        companies: companies.map(company => ({
          id: company.id,
          name: company.name,
          code: company.code,
          description: company.description,
          userRole: company.company_users[0]?.role || 'user'
        }))
      }
    });

  } catch (error) {
    logger.error('Account Context: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π'
    });
  }
};

module.exports = {
  switchToCompany,
  getAvailableCompanies
};
