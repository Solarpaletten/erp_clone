// b/src/controllers/company/salesController.js
const { prisma } = require('../../utils/prismaManager');
const { logger } = require('../../config/logger');

// üìä GET /api/company/sales/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
const getSalesStats = async (req, res) => {
  try {
    const companyId = req.companyContext?.companyId;
    
    if (!companyId) {
      return res.status(400).json({ error: 'Company context required' });
    }

    logger.info(`üìä Fetching sales stats for company: ${companyId}`);

    const [
      totalSales,
      totalRevenue,
      avgOrderValue,
      statusStats,
      deliveryStats,
      topClients,
      monthlyStats
    ] = await Promise.all([
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂
      prisma.sales.count({
        where: { company_id: companyId }
      }),
      
      // –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
      prisma.sales.aggregate({
        where: { company_id: companyId },
        _sum: { total_amount: true }
      }),
      
      // –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
      prisma.sales.aggregate({
        where: { company_id: companyId },
        _avg: { total_amount: true }
      }),
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –ø–ª–∞—Ç–µ–∂–µ–π
      prisma.sales.groupBy({
        by: ['payment_status'],
        where: { company_id: companyId },
        _count: true
      }),
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ
      prisma.sales.groupBy({
        by: ['delivery_status'],
        where: { company_id: companyId },
        _count: true
      }),
      
      // –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã
      prisma.sales.groupBy({
        by: ['client_id'],
        where: { company_id: companyId },
        _count: true,
        _sum: { total_amount: true },
        orderBy: { _sum: { total_amount: 'desc' } },
        take: 5
      }),
      
      // –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ—Å—è—Ü–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤)
      prisma.sales.groupBy({
        by: ['document_date'],
        where: {
          company_id: companyId,
          document_date: {
            gte: new Date(new Date().getFullYear(), new Date().getMonth() - 11, 1)
          }
        },
        _sum: { total_amount: true },
        _count: true
      })
    ]);

    const stats = {
      total: totalSales,
      pending: statusStats.find(s => s.payment_status === 'PENDING')?._count || 0,
      paid: statusStats.find(s => s.payment_status === 'PAID')?._count || 0,
      overdue: statusStats.find(s => s.payment_status === 'OVERDUE')?._count || 0,
      cancelled: statusStats.find(s => s.payment_status === 'CANCELLED')?._count || 0,
      delivered: deliveryStats.find(s => s.delivery_status === 'DELIVERED')?._count || 0,
      pending_delivery: deliveryStats.find(s => s.delivery_status === 'PENDING')?._count || 0,
      totalRevenue: totalRevenue._sum.total_amount || 0,
      averageOrderValue: avgOrderValue._avg.total_amount || 0,
      topClients: topClients.length,
      monthlyRevenue: monthlyStats
    };

    res.json({
      success: true,
      stats,
      companyId
    });
  } catch (error) {
    logger.error('Error fetching sales statistics:', error);
    res.status(500).json({
      success: false,
      error: 'Error fetching sales statistics'
    });
  }
};

// üìã GET /api/company/sales - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏
const getAllSales = async (req, res) => {
  try {
    const companyId = req.companyContext?.companyId;
    const { 
      page = 1, 
      limit = 50, 
      search, 
      payment_status, 
      delivery_status,
      client_id,
      date_from,
      date_to,
      sort_by = 'document_date',
      sort_order = 'desc'
    } = req.query;

    logger.info(`üìã Fetching sales for company: ${companyId}`);

    const skip = (parseInt(page) - 1) * parseInt(limit);
    
    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const whereConditions = {
      company_id: companyId
    };

    if (search) {
      whereConditions.OR = [
        { document_number: { contains: search, mode: 'insensitive' } },
        { client: { name: { contains: search, mode: 'insensitive' } } }
      ];
    }

    if (payment_status) {
      whereConditions.payment_status = payment_status;
    }

    if (delivery_status) {
      whereConditions.delivery_status = delivery_status;
    }

    if (client_id) {
      whereConditions.client_id = parseInt(client_id);
    }

    if (date_from || date_to) {
      whereConditions.document_date = {};
      if (date_from) whereConditions.document_date.gte = new Date(date_from);
      if (date_to) whereConditions.document_date.lte = new Date(date_to);
    }

    const [sales, totalCount] = await Promise.all([
      prisma.sales.findMany({
        where: whereConditions,
        include: {
          client: {
            select: {
              id: true,
              name: true,
              email: true,
              phone: true
            }
          },
          warehouse: {
            select: {
              id: true,
              name: true,
              code: true
            }
          },
          sales_manager: {
            select: {
              id: true,
              first_name: true,
              last_name: true,
              email: true
            }
          },
          _count: {
            select: {
              items: true
            }
          }
        },
        orderBy: {
          [sort_by]: sort_order
        },
        skip,
        take: parseInt(limit)
      }),
      
      prisma.sales.count({ where: whereConditions })
    ]);

    res.json({
      success: true,
      sales,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total: totalCount,
        pages: Math.ceil(totalCount / parseInt(limit))
      },
      companyId
    });
  } catch (error) {
    logger.error('Error fetching sales:', error);
    res.status(500).json({
      success: false,
      error: 'Error fetching sales'
    });
  }
};

// üìÑ GET /api/company/sales/:id - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –ø–æ ID
const getSaleById = async (req, res) => {
  try {
    const { id } = req.params;
    const companyId = req.companyContext?.companyId;

    logger.info(`üìÑ Fetching sale ${id} for company: ${companyId}`);

    const sale = await prisma.sales.findFirst({
      where: {
        id: parseInt(id),
        company_id: companyId
      },
      include: {
        client: true,
        warehouse: true,
        sales_manager: true,
        creator: {
          select: {
            id: true,
            first_name: true,
            last_name: true,
            email: true
          }
        },
        modifier: {
          select: {
            id: true,
            first_name: true,
            last_name: true,
            email: true
          }
        },
        items: {
          include: {
            product: true
          },
          orderBy: {
            line_number: 'asc'
          }
        }
      }
    });

    if (!sale) {
      return res.status(404).json({
        success: false,
        error: 'Sale not found'
      });
    }

    res.json({
      success: true,
      sale,
      companyId
    });
  } catch (error) {
    logger.error('Error fetching sale:', error);
    res.status(500).json({
      success: false,
      error: 'Error fetching sale'
    });
  }
};

// ‚ûï POST /api/company/sales - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–¥–∞–∂—É –° –ê–í–¢–û–°–ü–ò–°–ê–ù–ò–ï–ú –°–û –°–ö–õ–ê–î–ê
const createSale = async (req, res) => {
  try {
    const companyId = req.companyContext?.companyId;
    const userId = req.user?.id || 1;
    
    const {
      document_number,
      document_date,
      document_type = 'INVOICE',
      delivery_date,
      due_date,
      client_id,
      warehouse_id,
      sales_manager_id,
      currency = 'EUR',
      payment_status = 'PENDING',
      delivery_status = 'PENDING',
      document_status = 'DRAFT',
      items = []
    } = req.body;

    if (!companyId) {
      return res.status(400).json({ 
        error: 'Company context required'
      });
    }

    logger.info(`‚ûï Creating sale for company: ${companyId}`);
    logger.info(`üìù Sale data:`, {
      document_number,
      client_id,
      warehouse_id,
      items: items.length,
      companyId,
      userId
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!document_number || !document_date || !client_id) {
      return res.status(400).json({
        success: false,
        error: 'Required fields: document_number, document_date, client_id'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const existingSale = await prisma.sales.findFirst({
      where: {
        company_id: companyId,
        document_number
      }
    });

    if (existingSale) {
      return res.status(400).json({
        success: false,
        error: 'Sale with this document number already exists'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const client = await prisma.clients.findFirst({
      where: { id: parseInt(client_id), company_id: companyId }
    });

    if (!client) {
      logger.error('‚ùå Client not found:', client_id);
      return res.status(400).json({
        success: false,
        error: `Client ${client_id} not found`
      });
    }

    logger.info(`‚úÖ Client found: ${client.name}`);

    // üî• –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –û–°–¢–ê–¢–ö–û–í –ù–ê –°–ö–õ–ê–î–ï
    logger.info(`üì¶ Checking stock availability for ${items.length} items...`);
    
    for (const item of items) {
      const product = await prisma.products.findUnique({
        where: { id: parseInt(item.product_id) },
        select: { 
          id: true,
          code: true, 
          name: true, 
          current_stock: true,
          unit: true 
        }
      });

      if (!product) {
        return res.status(400).json({
          success: false,
          error: `Product with ID ${item.product_id} not found`
        });
      }

      const currentStock = parseFloat(product.current_stock || 0);
      const requestedQuantity = parseFloat(item.quantity);

      if (currentStock < requestedQuantity) {
        logger.error(`‚ùå Insufficient stock for ${product.name}`);
        return res.status(400).json({
          success: false,
          error: `Insufficient stock for "${product.name}" (${product.code}). Available: ${currentStock} ${product.unit}, requested: ${requestedQuantity} ${product.unit}`
        });
      }

      logger.info(`‚úÖ Stock OK: ${product.name} - Available: ${currentStock}, Requested: ${requestedQuantity}`);
    }

    // –†–∞—Å—á—ë—Ç —Å—É–º–º
    let subtotal = 0;
    let vat_amount = 0;
    let discount_amount = 0;

    const processedItems = items.map((item, index) => {
      const lineSubtotal = parseFloat(item.quantity) * parseFloat(item.unit_price_base);
      const lineDiscount = parseFloat(item.total_discount || 0);
      const lineAfterDiscount = lineSubtotal - lineDiscount;
      const vatAmount = lineAfterDiscount * (parseFloat(item.vat_rate || 0) / 100);
      const lineTotal = lineAfterDiscount + vatAmount;
      
      subtotal += lineSubtotal;
      vat_amount += vatAmount;
      discount_amount += lineDiscount;

      return {
        product_id: parseInt(item.product_id),
        line_number: index + 1,
        quantity: parseFloat(item.quantity),
        unit_price_base: parseFloat(item.unit_price_base),
        discount_percent: parseFloat(item.discount_percent || 0),
        total_discount: lineDiscount,
        vat_rate: parseFloat(item.vat_rate || 0),
        vat_amount: vatAmount,
        line_total: lineTotal,
        description: item.description || null
      };
    });

    const total_amount = subtotal - discount_amount + vat_amount;

    logger.info(`üí∞ Calculated amounts:`, {
      subtotal,
      vat_amount,
      discount_amount,
      total_amount,
      items: processedItems.length
    });

    // üî• –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–ê–ñ–ò –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú –°–ü–ò–°–ê–ù–ò–ï–ú –°–û –°–ö–õ–ê–î–ê
    const sale = await prisma.$transaction(async (tx) => {
      // 1. –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥–∞–∂—É
      const newSale = await tx.sales.create({
        data: {
          company_id: companyId,
          document_number,
          document_date: new Date(document_date),
          document_type,
          delivery_date: delivery_date ? new Date(delivery_date) : null,
          due_date: due_date ? new Date(due_date) : null,
          client_id: parseInt(client_id),
          warehouse_id: warehouse_id ? parseInt(warehouse_id) : null,
          sales_manager_id: sales_manager_id ? parseInt(sales_manager_id) : null,
          subtotal,
          vat_amount,
          discount_amount,
          total_amount,
          currency,
          payment_status,
          delivery_status,
          document_status,
          created_by: userId,
          created_at: new Date()
        }
      });

      logger.info(`‚úÖ Created sale: ${newSale.id}`);

      // 2. –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–¥–∞–∂–∏
      if (processedItems.length > 0) {
        await tx.sale_items.createMany({
          data: processedItems.map(item => ({
            sale_id: newSale.id,
            product_id: item.product_id,
            line_number: item.line_number,
            quantity: item.quantity,
            unit_price_base: item.unit_price_base,
            discount_percent: item.discount_percent,
            total_discount: item.total_discount,
            vat_rate: item.vat_rate,
            vat_amount: item.vat_amount,
            line_total: item.line_total,
            description: item.description
          }))
        });
        
        logger.info(`‚úÖ Created ${processedItems.length} sale items`);

        // üî• 3. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–ü–ò–°–ê–ù–ò–ï –°–û –°–ö–õ–ê–î–ê
        logger.info(`üì¶ Starting automatic stock decrease for ${processedItems.length} items...`);
        
        for (const item of processedItems) {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä
          const currentProduct = await tx.products.findUnique({
            where: { id: item.product_id },
            select: { 
              id: true,
              code: true, 
              name: true, 
              current_stock: true,
              unit: true 
            }
          });

          if (currentProduct) {
            const currentStock = parseFloat(currentProduct.current_stock || 0);
            const newStock = currentStock - item.quantity; // –ü–†–û–î–ê–ñ–ê = –£–ú–ï–ù–¨–®–ï–ù–ò–ï

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞
            await tx.products.update({
              where: { id: item.product_id },
              data: { 
                current_stock: newStock,
                updated_at: new Date()
              }
            });

            logger.info(`üì¶ STOCK UPDATE: ${currentProduct.name} (${currentProduct.code})`);
            logger.info(`   Current: ${currentStock} ${currentProduct.unit || 'pcs'}`);
            logger.info(`   - Sale: ${item.quantity} ${currentProduct.unit || 'pcs'}`);
            logger.info(`   = New Stock: ${newStock} ${currentProduct.unit || 'pcs'}`);
          } else {
            logger.warn(`‚ö†Ô∏è Product ${item.product_id} not found for stock update`);
          }
        }

        logger.info(`üéâ All stock quantities decreased automatically!`);
      }

      return newSale;
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    const createdSale = await prisma.sales.findUnique({
      where: { id: sale.id },
      include: {
        client: true,
        warehouse: true,
        sales_manager: true,
        items: {
          include: {
            product: {
              select: {
                id: true,
                code: true,
                name: true,
                current_stock: true, // üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–°–¢–ê–¢–û–ö
                unit: true,
                min_stock: true
              }
            }
          }
        }
      }
    });

    logger.info(`üéâ Sale created successfully: ${sale.id}`);

    // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–í–ò–ñ–ï–ù–ò–ò –¢–û–í–ê–†–û–í
    const stockUpdates = processedItems.map(item => {
      const productItem = createdSale.items.find(i => i.product_id === item.product_id);
      const currentStock = parseFloat(productItem?.product?.current_stock || '0');
      const minStock = parseFloat(productItem?.product?.min_stock || '0');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞—Ç–∫–∞
      let stockStatus = 'OK';
      if (currentStock <= 0) stockStatus = 'OUT_OF_STOCK';
      else if (currentStock <= minStock) stockStatus = 'LOW_STOCK';
      
      return {
        product_id: item.product_id,
        product_name: productItem?.product?.name || 'Unknown',
        product_code: productItem?.product?.code || '',
        quantity_sold: item.quantity,
        new_stock: currentStock,
        min_stock: minStock,
        stock_status: stockStatus,
        unit: productItem?.product?.unit || 'pcs',
        operation: 'STOCK_DECREASE',
        warehouse_id: warehouse_id || null
      };
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
    const lowStockWarnings = stockUpdates.filter(update => 
      update.stock_status === 'LOW_STOCK' || update.stock_status === 'OUT_OF_STOCK'
    );

    res.status(201).json({
      success: true,
      sale: createdSale,
      message: 'Sale created successfully and stock updated automatically',
      stock_updates: stockUpdates,
      warnings: lowStockWarnings.length > 0 ? {
        message: `${lowStockWarnings.length} products have low or zero stock`,
        items: lowStockWarnings
      } : null,
      summary: {
        total_items: processedItems.length,
        total_amount: total_amount,
        currency: currency,
        warehouse: warehouse_id ? `Warehouse ID: ${warehouse_id}` : 'No specific warehouse',
        stock_updated: true,
        low_stock_warnings: lowStockWarnings.length
      },
      companyId
    });
  } catch (error) {
    logger.error('‚ùå Error creating sale:', error);
    logger.error('Stack trace:', error.stack);
    
    if (error.code) {
      logger.error('Prisma error code:', error.code);
      logger.error('Prisma error meta:', error.meta);
    }
    
    res.status(500).json({
      success: false,
      error: 'Error creating sale',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// üéØ SALES CONTROLLER - –í–´–ë–û–† –ü–ê–†–¢–ò–ô –î–õ–Ø –û–¢–ì–†–£–ó–ö–ò

// ===============================================
// üì¶ –ü–û–õ–£–ß–ï–ù–ò–ï –î–û–°–¢–£–ü–ù–´–• –ü–ê–†–¢–ò–ô –î–õ–Ø –¢–û–í–ê–†–ê
// ===============================================

const getAvailableBatches = async (req, res) => {
  try {
    const { productId, warehouseId } = req.params;
    const companyId = req.companyContext?.companyId;

    logger.info(`üì¶ Getting available batches for product ${productId} at warehouse ${warehouseId}`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
    const batches = await prisma.$queryRaw`
      SELECT 
        pb.id as batch_id,
        pb.batch_number,
        pb.supplier_id,
        c.name as supplier_name,
        pb.purchase_date,
        pb.expiry_date,
        pb.current_quantity,
        pb.unit_cost,
        pb.current_quantity * pb.unit_cost as total_value,
        p.unit,
        w.name as warehouse_name
      FROM product_batches pb
      JOIN clients c ON pb.supplier_id = c.id
      JOIN products p ON pb.product_id = p.id
      JOIN warehouses w ON pb.warehouse_id = w.id
      WHERE pb.company_id = ${companyId}
        AND pb.product_id = ${parseInt(productId)}
        AND pb.warehouse_id = ${parseInt(warehouseId)}
        AND pb.current_quantity > 0
        AND pb.status = 'ACTIVE'
      ORDER BY pb.purchase_date ASC, pb.id ASC
    `;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä—É
    const product = await prisma.products.findFirst({
      where: { 
        id: parseInt(productId), 
        company_id: companyId 
      },
      select: {
        id: true,
        code: true,
        name: true,
        unit: true,
        current_stock: true
      }
    });

    res.json({
      success: true,
      product,
      batches: batches.map(batch => ({
        ...batch,
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        purchase_date: new Date(batch.purchase_date).toLocaleDateString(),
        expiry_date: batch.expiry_date ? new Date(batch.expiry_date).toLocaleDateString() : null,
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
        current_quantity: parseFloat(batch.current_quantity),
        unit_cost: parseFloat(batch.unit_cost),
        total_value: parseFloat(batch.total_value)
      })),
      totalAvailable: batches.reduce((sum, batch) => sum + parseFloat(batch.current_quantity), 0),
      companyId
    });

  } catch (error) {
    logger.error('Error fetching available batches:', error);
    res.status(500).json({
      success: false,
      error: 'Error fetching available batches'
    });
  }
};

// ===============================================
// üî• –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–ê–ñ–ò –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú FIFO –°–ü–ò–°–ê–ù–ò–ï–ú
// ===============================================

const createSaleWithBatchTracking = async (req, res) => {
  try {
    const companyId = req.companyContext?.companyId;
    const userId = req.user?.id;

    const {
      document_number,
      document_date,
      document_type = 'INVOICE',
      delivery_date,
      due_date,
      client_id,
      warehouse_id,
      sales_manager_id,
      currency = 'EUR',
      payment_status = 'PENDING',
      delivery_status = 'PENDING',
      document_status = 'DRAFT',
      items = []
    } = req.body;

    logger.info(`üõí Creating sale with batch tracking for company: ${companyId}`);

    // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥–∞–∂—É —Å FIFO —Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–∞—Ä—Ç–∏–π
    const sale = await prisma.$transaction(async (tx) => {
      
      // 1. –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥–∞–∂—É
      const newSale = await tx.sales.create({
        data: {
          company_id: companyId,
          document_number,
          document_date: new Date(document_date),
          document_type,
          delivery_date: delivery_date ? new Date(delivery_date) : null,
          due_date: due_date ? new Date(due_date) : null,
          client_id: parseInt(client_id),
          warehouse_id: warehouse_id ? parseInt(warehouse_id) : null,
          sales_manager_id: sales_manager_id ? parseInt(sales_manager_id) : null,
          subtotal: 0, // –ü–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—Ç–∏–π
          vat_amount: 0,
          discount_amount: 0,
          total_amount: 0,
          currency,
          payment_status,
          delivery_status,
          document_status,
          created_by: userId
        }
      });

      let totalSubtotal = 0;
      let totalVatAmount = 0;
      let totalDiscountAmount = 0;

      // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–¥–∞–∂–∏
      for (const [index, item] of items.entries()) {
        const requestedQuantity = parseFloat(item.quantity);
        const salePrice = parseFloat(item.unit_price_base);
        
        logger.info(`üì¶ Processing sale item: Product ${item.product_id}, Qty: ${requestedQuantity}`);

        // üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï FIFO –°–ü–ò–°–ê–ù–ò–ï –ü–ê–†–¢–ò–ô
        const batchAllocations = await tx.$queryRaw`
          SELECT 
            pb.id as batch_id,
            pb.batch_number,
            pb.supplier_id,
            pb.unit_cost,
            pb.current_quantity,
            LEAST(${requestedQuantity}, pb.current_quantity) as allocated_quantity
          FROM product_batches pb
          WHERE pb.company_id = ${companyId}
            AND pb.product_id = ${parseInt(item.product_id)}
            AND pb.warehouse_id = ${warehouse_id}
            AND pb.current_quantity > 0
            AND pb.status = 'ACTIVE'
          ORDER BY pb.purchase_date ASC, pb.id ASC
        `;

        let remainingQuantity = requestedQuantity;
        let weightedAverageCost = 0;
        let totalAllocatedValue = 0;

        // –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä —Å –ø–∞—Ä—Ç–∏–π –ø–æ FIFO
        for (const allocation of batchAllocations) {
          if (remainingQuantity <= 0) break;

          const allocatedQty = Math.min(remainingQuantity, parseFloat(allocation.current_quantity));
          const allocationValue = allocatedQty * parseFloat(allocation.unit_cost);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –≤ –ø–∞—Ä—Ç–∏–∏
          await tx.product_batches.update({
            where: { id: allocation.batch_id },
            data: {
              current_quantity: parseFloat(allocation.current_quantity) - allocatedQty,
              updated_at: new Date(),
              status: (parseFloat(allocation.current_quantity) - allocatedQty) === 0 ? 'SOLD_OUT' : 'ACTIVE'
            }
          });

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏
          await tx.batch_movements.create({
            data: {
              company_id: companyId,
              batch_id: allocation.batch_id,
              product_id: parseInt(item.product_id),
              warehouse_id: warehouse_id,
              sale_id: newSale.id,
              movement_type: 'OUT',
              quantity: -allocatedQty, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = —Ä–∞—Å—Ö–æ–¥
              unit_cost: parseFloat(allocation.unit_cost),
              description: `Sale ${document_number} - FIFO allocation`,
              reference_document: document_number,
              movement_date: new Date(document_date),
              created_by: userId
            }
          });

          totalAllocatedValue += allocationValue;
          remainingQuantity -= allocatedQty;

          logger.info(`üì¶ FIFO: Allocated ${allocatedQty} from batch ${allocation.batch_number} at cost ‚Ç¨${allocation.unit_cost}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Å—å —Ç–æ–≤–∞—Ä —Ä–∞–∑–º–µ—â—ë–Ω
        if (remainingQuantity > 0) {
          throw new Error(`Insufficient stock: Product ${item.product_id}, requested ${requestedQuantity}, available ${requestedQuantity - remainingQuantity}`);
        }

        // –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        weightedAverageCost = totalAllocatedValue / requestedQuantity;

        // –†–∞—Å—á—ë—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏
        const lineSubtotal = requestedQuantity * salePrice;
        const lineDiscount = parseFloat(item.total_discount || 0);
        const lineAfterDiscount = lineSubtotal - lineDiscount;
        const lineVat = lineAfterDiscount * (parseFloat(item.vat_rate || 0) / 100);
        const lineTotal = lineAfterDiscount + lineVat;

        // –°–æ–∑–¥–∞—ë–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–¥–∞–∂–∏
        await tx.sale_items.create({
          data: {
            sale_id: newSale.id,
            product_id: parseInt(item.product_id),
            line_number: index + 1,
            quantity: requestedQuantity,
            unit_price_base: salePrice,
            discount_percent: parseFloat(item.discount_percent || 0),
            total_discount: lineDiscount,
            vat_rate: parseFloat(item.vat_rate || 0),
            vat_amount: lineVat,
            line_total: lineTotal,
            description: item.description || null,
            // –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –°–ï–ë–ï–°–¢–û–ò–ú–û–°–¢–ò
            cost_price: weightedAverageCost, // –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
            margin_amount: lineTotal - (requestedQuantity * weightedAverageCost) // –ú–∞—Ä–∂–∞
          }
        });

        totalSubtotal += lineSubtotal;
        totalVatAmount += lineVat;
        totalDiscountAmount += lineDiscount;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞
        await tx.products.update({
          where: { id: parseInt(item.product_id) },
          data: {
            current_stock: {
              decrement: requestedQuantity
            },
            updated_at: new Date()
          }
        });

        logger.info(`‚úÖ Sale item processed: Qty ${requestedQuantity}, Cost ‚Ç¨${weightedAverageCost.toFixed(2)}, Price ‚Ç¨${salePrice}`);
      }

      // 3. –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ –ø—Ä–æ–¥–∞–∂–∏
      const totalAmount = totalSubtotal - totalDiscountAmount + totalVatAmount;
      
      await tx.sales.update({
        where: { id: newSale.id },
        data: {
          subtotal: totalSubtotal,
          vat_amount: totalVatAmount,
          discount_amount: totalDiscountAmount,
          total_amount: totalAmount
        }
      });

      return newSale;
    });

    logger.info(`üéâ Sale created successfully with batch tracking: ${sale.id}`);

    res.status(201).json({
      success: true,
      sale,
      message: 'Sale created successfully with batch tracking',
      inventory_info: {
        items_processed: items.length,
        warehouse_id: warehouse_id,
        fifo_applied: true
      }
    });

  } catch (error) {
    logger.error('Error creating sale with batch tracking:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Error creating sale'
    });
  }
};

// ‚úèÔ∏è PUT /api/company/sales/:id - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É
const updateSale = async (req, res) => {
  try {
    const { id } = req.params;
    const companyId = req.companyContext?.companyId;
    const userId = req.user.id;
    const updateData = req.body;

    logger.info(`‚úèÔ∏è Updating sale ${id} for company: ${companyId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
    const existingSale = await prisma.sales.findFirst({
      where: {
        id: parseInt(id),
        company_id: companyId
      }
    });

    if (!existingSale) {
      return res.status(404).json({
        success: false,
        error: 'Sale not found'
      });
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const {
      items,
      ...saleFields
    } = updateData;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥–∞–∂—É
    const updatedSale = await prisma.$transaction(async (tx) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ–¥–∞–∂–∏
      const sale = await tx.sales.update({
        where: { id: parseInt(id) },
        data: {
          ...saleFields,
          updated_by: userId,
          updated_at: new Date()
        }
      });

      // –ï—Å–ª–∏ –µ—Å—Ç—å items, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
      if (items && Array.isArray(items)) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ items
        await tx.sale_items.deleteMany({
          where: { sale_id: parseInt(id) }
        });

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ items
        if (items.length > 0) {
          let subtotal = 0;
          let vat_amount = 0;
          let discount_amount = 0;

          const processedItems = items.map((item, index) => {
            const lineSubtotal = parseFloat(item.quantity) * parseFloat(item.unit_price_base);
            const lineDiscount = parseFloat(item.total_discount || 0);
            const lineAfterDiscount = lineSubtotal - lineDiscount;
            const vatAmount = lineAfterDiscount * (parseFloat(item.vat_rate || 0) / 100);
            const lineTotal = lineAfterDiscount + vatAmount;
            
            subtotal += lineSubtotal;
            vat_amount += vatAmount;
            discount_amount += lineDiscount;

            return {
              sale_id: parseInt(id),
              product_id: parseInt(item.product_id),
              line_number: index + 1,
              quantity: parseFloat(item.quantity),
              unit_price_base: parseFloat(item.unit_price_base),
              discount_percent: parseFloat(item.discount_percent || 0),
              total_discount: lineDiscount,
              vat_rate: parseFloat(item.vat_rate || 0),
              vat_amount: vatAmount,
              line_total: lineTotal,
              description: item.description || null
            };
          });

          const total_amount = subtotal - discount_amount + vat_amount;

          await tx.sale_items.createMany({
            data: processedItems
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã
          await tx.sales.update({
            where: { id: parseInt(id) },
            data: {
              subtotal,
              vat_amount,
              discount_amount,
              total_amount
            }
          });
        }
      }

      return sale;
    });

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –ø—Ä–æ–¥–∞–∂—É
    const sale = await prisma.sales.findUnique({
      where: { id: parseInt(id) },
      include: {
        client: true,
        warehouse: true,
        sales_manager: true,
        items: {
          include: {
            product: true
          }
        }
      }
    });

    res.json({
      success: true,
      sale,
      message: 'Sale updated successfully',
      companyId
    });
  } catch (error) {
    logger.error('Error updating sale:', error);
    res.status(500).json({
      success: false,
      error: 'Error updating sale'
    });
  }
};

// üóëÔ∏è DELETE /api/company/sales/:id - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É
const deleteSale = async (req, res) => {
  try {
    const { id } = req.params;
    const companyId = req.companyContext?.companyId;

    logger.info(`üóëÔ∏è Deleting sale ${id} for company: ${companyId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
    const existingSale = await prisma.sales.findFirst({
      where: {
        id: parseInt(id),
        company_id: companyId
      }
    });

    if (!existingSale) {
      return res.status(404).json({
        success: false,
        error: 'Sale not found'
      });
    }

    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥–∞–∂—É (items —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ CASCADE)
    await prisma.sales.delete({
      where: { id: parseInt(id) }
    });

    res.json({
      success: true,
      message: 'Sale deleted successfully',
      companyId
    });
  } catch (error) {
    logger.error('Error deleting sale:', error);
    res.status(500).json({
      success: false,
      error: 'Error deleting sale'
    });
  }
};

module.exports = {
  getSalesStats,
  getAllSales,
  getSaleById,
  createSale,
  getAvailableBatches,
  createSaleWithBatchTracking,
  updateSale,
  deleteSale
};