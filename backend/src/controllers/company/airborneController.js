// =====================================================
// üöÄ airborneController.js - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ SWAPOIL
// –§–∞–π–ª: b/src/controllers/company/airborneController.js
// =====================================================

/**
 * üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ SWAPOIL
 * POST /api/airborne/company/init-templates
 */
const initCompanyTemplates = async (req, res) => {
    try {
      const { companyId } = req.body;
      const userId = req.user.id;
  
      // ‚úÖ –ü–†–û–í–ï–†–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
      if (!companyId) {
        return res.status(400).json({
          success: false,
          error: 'Company ID is required'
        });
      }
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ Prisma
      const hasAccess = await req.prisma.company_users.findFirst({
        where: {
          company_id: parseInt(companyId),
          user_id: userId,
          role: { in: ['ADMIN', 'OWNER'] }
        }
      });
  
      if (!hasAccess) {
        return res.status(403).json({
          success: false,
          error: 'Access denied to company'
        });
      }
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —à–∞–±–ª–æ–Ω—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
      const existingTemplates = await req.prisma.warehouses.findFirst({
        where: {
          company_id: parseInt(companyId),
          is_template: true
        }
      });
  
      if (existingTemplates) {
        return res.status(409).json({
          success: false,
          error: 'Templates already exist for this company',
          message: '–ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏'
        });
      }
  
      // üèóÔ∏è –°–û–ó–î–ê–ï–ú –ù–ï–§–¢–Ø–ù–´–ï –®–ê–ë–õ–û–ù–´ –û–î–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ï–ô –ß–ï–†–ï–ó PRISMA
      const templates = await req.prisma.$transaction(async (tx) => {
        
        // 1Ô∏è‚É£ –û–°–ù–û–í–ù–û–ô –°–ö–õ–ê–î "–º–∞—Å–ª–æ —Ä–∞–ø—Å–æ–≤–æ–µ"
        const warehouse = await tx.warehouses.create({
          data: {
            name: '–º–∞—Å–ª–æ —Ä–∞–ø—Å–æ–≤–æ–µ',
            code: 'RAPESEED_OIL',
            description: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥ —Ä–∞–ø—Å–æ–≤–æ–≥–æ –º–∞—Å–ª–∞',
            address: '–°–∫–ª–∞–¥ –Ω–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç–æ–≤',
            company_id: parseInt(companyId),
            is_template: true,
            status: 'ACTIVE',
            is_main: true,
            created_by: userId
          }
        });
  
        // 2Ô∏è‚É£ –¢–û–í–ê–† "Residues technical rapeseed oil"
        const product = await tx.products.create({
          data: {
            name: 'Residues technical rapeseed oil',
            code: 'RTRO-001',
            description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ä–∞–ø—Å–æ–≤–æ–≥–æ –º–∞—Å–ª–∞',
            unit: '—Ç–æ–Ω–Ω–∞',
            purchase_price: 650.00, // 650 –µ–≤—Ä–æ –∑–∞ —Ç–æ–Ω–Ω—É
            sale_price: 680.00,     // + –Ω–∞—Ü–µ–Ω–∫–∞
            vat_rate: 23.00,        // 23% –ù–î–°
            stock_quantity: 0,
            min_stock_level: 5,
            company_id: parseInt(companyId),
            warehouse_id: warehouse.id,
            is_template: true,
            // –°–≤—è–∑–∏ —Å –ø–ª–∞–Ω–æ–º —Å—á–µ—Ç–æ–≤
            inventory_account: '2041', // –ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã
            expense_account: '6001',   // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
            created_by: userId
          }
        });
  
        // 3Ô∏è‚É£ –ü–û–°–¢–ê–í–©–ò–ö "ASSET BILANS SPOLKA Z O O"
        const supplier = await tx.clients.create({
          data: {
            name: 'ASSET BILANS SPOLKA Z O O',
            code: 'ASSET-BILANS',
            client_role: 'SUPPLIER',
            company_name: 'ASSET BILANS SPOLKA Z O O',
            country: 'PL',
            currency: 'EUR',
            payment_terms_days: 30,
            credit_limit: 100000.00,
            // –ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤ - –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏
            account_code: '4430',
            company_id: parseInt(companyId),
            is_template: true,
            created_by: userId
          }
        });
  
        // 4Ô∏è‚É£ –ü–û–ö–£–ü–ê–¢–ï–õ–¨ "SWAPOIL GMBH"  
        const customer = await tx.clients.create({
          data: {
            name: 'SWAPOIL GMBH',
            code: 'SWAPOIL-DE',
            client_role: 'CLIENT',
            company_name: 'SWAPOIL GMBH',
            country: 'DE',
            currency: 'EUR',
            payment_terms_days: 15,
            credit_limit: 500000.00,
            // –ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤ - –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏
            account_code: '2410',
            company_id: parseInt(companyId),
            is_template: true,
            created_by: userId
          }
        });
  
        // 5Ô∏è‚É£ –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–ï –õ–ò–¶–û "LEANID KANOPLICH"
        let responsiblePerson = await tx.users.findFirst({
          where: {
            OR: [
              { username: 'leanid.kanoplich' },
              { email: 'leanid@swapoil.de' }
            ]
          }
        });
  
        if (!responsiblePerson) {
          responsiblePerson = await tx.users.create({
            data: {
              username: 'leanid.kanoplich',
              email: 'leanid@swapoil.de',
              password_hash: 'temp_hash_to_be_updated',
              first_name: 'LEANID',
              last_name: 'KANOPLICH',
              role: 'ADMIN',
              is_active: true,
              onboarding_completed: true
            }
          });
  
          // –°–≤—è–∑—ã–≤–∞–µ–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π
          await tx.company_users.create({
            data: {
              company_id: parseInt(companyId),
              user_id: responsiblePerson.id,
              role: 'OWNER'
            }
          });
        }
  
        // 6Ô∏è‚É£ –ü–õ–ê–ù –°–ß–ï–¢–û–í (–æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
        const chartAccounts = await tx.chart_of_accounts.createMany({
          data: [
            {
              account_code: '2410',
              account_name: '–î–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π',
              account_type: 'ASSET',
              currency: 'EUR',
              company_id: parseInt(companyId),
              created_by: userId
            },
            {
              account_code: '2710', 
              account_name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞',
              account_type: 'ASSET',
              currency: 'EUR',
              company_id: parseInt(companyId),
              created_by: userId
            },
            {
              account_code: '4430',
              account_name: '–ö—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º',
              account_type: 'LIABILITY',
              currency: 'EUR', 
              company_id: parseInt(companyId),
              created_by: userId
            },
            {
              account_code: '2041',
              account_name: '–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–µ',
              account_type: 'ASSET',
              currency: 'EUR',
              company_id: parseInt(companyId),
              created_by: userId
            }
          ]
        });
  
        return {
          warehouse,
          product,
          supplier,
          customer,
          responsiblePerson,
          chartAccountsCount: 4
        };
      });
  
      // üìä –£–°–ü–ï–®–ù–´–ô –û–¢–í–ï–¢
      res.status(201).json({
        success: true,
        message: 'üõ¢Ô∏è –®–∞–±–ª–æ–Ω—ã –¥–ª—è –Ω–µ—Ñ—Ç—è–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–æ–∑–¥–∞–Ω—ã!',
        data: {
          templates: {
            warehouse: {
              id: templates.warehouse.id,
              name: '–º–∞—Å–ª–æ —Ä–∞–ø—Å–æ–≤–æ–µ',
              code: 'RAPESEED_OIL'
            },
            product: {
              id: templates.product.id,
              name: 'Residues technical rapeseed oil',
              price: '650 EUR/—Ç–æ–Ω–Ω–∞',
              quantity: '23 —Ç–æ–Ω–Ω—ã',
              vat: '23%'
            },
            supplier: {
              id: templates.supplier.id,
              name: 'ASSET BILANS SPOLKA Z O O',
              account: '4430'
            },
            customer: {
              id: templates.customer.id,
              name: 'SWAPOIL GMBH',
              account: '2410'
            },
            responsiblePerson: {
              id: templates.responsiblePerson.id,
              name: 'LEANID KANOPLICH'
            },
            chartOfAccounts: {
              count: templates.chartAccountsCount,
              accounts: ['2410', '2710', '4430', '2041']
            }
          },
          companyId: parseInt(companyId),
          createdAt: new Date().toISOString(),
          readyForOilTrading: true
        }
      });
  
    } catch (error) {
      console.error('‚ùå Error creating oil trading templates:', error);
  
      res.status(500).json({
        success: false,
        error: 'Failed to create oil trading templates',
        message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –Ω–µ—Ñ—Ç—è–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  };
  
  /**
   * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –Ω–µ—Ñ—Ç—è–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
   * GET /api/airborne/company/:id/templates/check
   */
  const checkTemplatesExist = async (req, res) => {
    try {
      const { id: companyId } = req.params;
      const userId = req.user.id;
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ Prisma
      const hasAccess = await req.prisma.company_users.findFirst({
        where: {
          company_id: parseInt(companyId),
          user_id: userId
        }
      });
  
      if (!hasAccess) {
        return res.status(403).json({
          success: false,
          error: 'Access denied'
        });
      }
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ñ—Ç—è–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
      const [warehouse, product, supplier, customer] = await Promise.all([
        req.prisma.warehouses.findFirst({ 
          where: { company_id: parseInt(companyId), name: '–º–∞—Å–ª–æ —Ä–∞–ø—Å–æ–≤–æ–µ' } 
        }),
        req.prisma.products.findFirst({ 
          where: { company_id: parseInt(companyId), name: 'Residues technical rapeseed oil' } 
        }),
        req.prisma.clients.findFirst({ 
          where: { company_id: parseInt(companyId), name: 'ASSET BILANS SPOLKA Z O O' } 
        }),
        req.prisma.clients.findFirst({ 
          where: { company_id: parseInt(companyId), name: 'SWAPOIL GMBH' } 
        })
      ]);
  
      const oilTradingReady = !!(warehouse && product && supplier && customer);
  
      res.json({
        success: true,
        oilTradingReady,
        templates: {
          warehouse: !!warehouse,
          oilProduct: !!product,
          assetBilans: !!supplier,
          swapoil: !!customer
        },
        readyForAirborne: oilTradingReady,
        message: oilTradingReady ? 
          'üõ¢Ô∏è SWAPOIL –≥–æ—Ç–æ–≤ –∫ –≤–æ–∑–¥—É—à–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ!' : 
          '‚ö†Ô∏è –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏'
      });
  
    } catch (error) {
      console.error('Error checking oil trading templates:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to check templates'
      });
    }
  };
  
  module.exports = {
    initCompanyTemplates,
    checkTemplatesExist
  };