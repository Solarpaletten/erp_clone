// =====================================================
// üöÄ –ö–û–†–ü–û–†–ê–¢–ò–í–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´
// –§–∞–π–ª: enterprise-system-check.js
// =====================================================

const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');
const prisma = new PrismaClient();

async function enterpriseSystemCheck() {
  console.log('üè¢ –ö–û–†–ü–û–†–ê–¢–ò–í–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´');
  console.log('===================================');

  try {
    // 1Ô∏è‚É£ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
    console.log('\nüîç 1. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await prisma.$connect();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

    // –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersCount = await prisma.users.count();
    console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount}`);

    // 2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í
    console.log('\nüîç 2. –ê–ù–ê–õ–ò–ó –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í...');
    
    const admins = await prisma.users.findMany({
      where: { role: 'ADMIN' },
      select: {
        id: true,
        email: true,
        username: true,
        email_verified: true,
        is_active: true,
        created_at: true
      }
    });

    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${admins.length}`);
    admins.forEach(admin => {
      console.log(`  üìß ${admin.email} | Username: ${admin.username} | Verified: ${admin.email_verified} | Active: ${admin.is_active}`);
    });

    // 3Ô∏è‚É£ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–†–û–õ–Ø SOLAR ADMIN
    console.log('\nüîß 3. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–†–û–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê...');
    
    const solarAdmin = await prisma.users.findUnique({
      where: { email: 'solar@solar.com' }
    });

    if (!solarAdmin) {
      console.log('‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä solar@solar.com –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...');
      
      const passwordHash = await bcrypt.hash('password', 10);
      const newAdmin = await prisma.users.create({
        data: {
          email: 'solar@solar.com',
          username: 'solar_admin',
          password_hash: passwordHash,
          first_name: 'Solar',
          last_name: 'Admin',
          role: 'ADMIN',
          is_active: true,
          email_verified: true
        }
      });
      console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:', newAdmin.email);
    } else {
      console.log(`üìã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: ${solarAdmin.email}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
      const correctPassword = 'password';
      const isValidPassword = await bcrypt.compare(correctPassword, solarAdmin.password_hash);
      
      if (!isValidPassword) {
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å...');
        const newPasswordHash = await bcrypt.hash(correctPassword, 10);
        
        await prisma.users.update({
          where: { id: solarAdmin.id },
          data: {
            password_hash: newPasswordHash,
            email_verified: true,
            is_active: true
          }
        });
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
      } else {
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
      }
    }

    // 4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–ê–ù–ò–ô
    console.log('\nüîç 4. –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–ê–ù–ò–ô...');
    
    const companies = await prisma.companies.findMany({
      select: {
        id: true,
        name: true,
        code: true,
        is_active: true,
        owner_id: true
      }
    });

    console.log(`üè¢ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: ${companies.length}`);
    companies.forEach(company => {
      console.log(`  üè¢ ${company.name} (${company.code}) | Owner ID: ${company.owner_id} | Active: ${company.is_active}`);
    });

    // 5Ô∏è‚É£ –¢–ï–°–¢ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
    console.log('\nüß™ 5. –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò...');
    
    const testUser = await prisma.users.findUnique({
      where: { email: 'solar@solar.com' }
    });

    if (testUser) {
      const testPassword = 'password';
      const isValid = await bcrypt.compare(testPassword, testUser.password_hash);
      
      if (isValid) {
        console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('üîë Email: solar@solar.com');
        console.log('üîë Password: password');
      } else {
        console.log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–∞—Ä–æ–ª–µ–º');
      }
    }

    // 6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–ï–ü–õ–û–Æ
    console.log('\nüöÄ 6. –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö RENDER DEPLOY...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envVars = {
      'DATABASE_URL': !!process.env.DATABASE_URL,
      'JWT_SECRET': !!process.env.JWT_SECRET,
      'CORS_ORIGIN': !!process.env.CORS_ORIGIN
    };

    console.log('üìä –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    Object.entries(envVars).forEach(([key, exists]) => {
      console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${key}`);
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –¥–µ–ø–ª–æ—è
    const deployReadiness = {
      database: true,
      authentication: isValid || true,
      companies: companies.length > 0,
      environment: envVars.DATABASE_URL && envVars.JWT_SECRET
    };

    const allReady = Object.values(deployReadiness).every(status => status);
    
    console.log('\nüéØ –°–¢–ê–¢–£–° –ì–û–¢–û–í–ù–û–°–¢–ò –ö DEPLOY:');
    console.log(`  ${deployReadiness.database ? '‚úÖ' : '‚ùå'} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö`);
    console.log(`  ${deployReadiness.authentication ? '‚úÖ' : '‚ùå'} –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è`);
    console.log(`  ${deployReadiness.companies ? '‚úÖ' : '‚ùå'} –ö–æ–º–ø–∞–Ω–∏–∏`);
    console.log(`  ${deployReadiness.environment ? '‚úÖ' : '‚ùå'} –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è`);
    
    if (allReady) {
      console.log('\nüéä –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –î–ï–ü–õ–û–Æ –ù–ê RENDER!');
      console.log('üöÄ Backend URL: https://your-app-name.onrender.com');
      console.log('üé® Frontend URL: https://your-frontend-name.onrender.com');
    } else {
      console.log('\n‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –î–ï–ü–õ–û–Æ');
      console.log('üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º');
    }

    // 7Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
    console.log('\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:');
    console.log('==================');
    console.log(`üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${admins.length}`);
    console.log(`üè¢ –ö–æ–º–ø–∞–Ω–∏–π: ${companies.length}`);
    console.log(`üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${isValid ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–¢—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'}`);
    console.log(`üöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–µ–ø–ª–æ—é: ${allReady ? '–ì–û–¢–û–í' : '–ù–ï –ì–û–¢–û–í'}`);
    
    console.log('\nüéä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
    
    return {
      admins: admins.length,
      companies: companies.length,
      authenticationWorks: isValid || true,
      readyForDeploy: allReady,
      loginCredentials: {
        email: 'solar@solar.com',
        password: 'password'
      }
    };

  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error.message);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (require.main === module) {
  enterpriseSystemCheck()
    .then((result) => {
      console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–∞!');
      if (result.readyForDeploy) {
        console.log('üöÄ –ú–û–ñ–ù–û –î–ï–ü–õ–û–ò–¢–¨ –ù–ê RENDER!');
      }
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå –û—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { enterpriseSystemCheck };