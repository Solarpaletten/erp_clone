
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password_hash: 'password_hash',
  first_name: 'first_name',
  last_name: 'last_name',
  phone: 'phone',
  role: 'role',
  status: 'status',
  is_active: 'is_active',
  email_verified: 'email_verified',
  email_verified_at: 'email_verified_at',
  verification_token: 'verification_token',
  reset_token: 'reset_token',
  reset_token_expires: 'reset_token_expires',
  onboarding_completed: 'onboarding_completed',
  current_company_id: 'current_company_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  last_login_at: 'last_login_at'
};

exports.Prisma.CompaniesScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  short_name: 'short_name',
  description: 'description',
  email: 'email',
  phone: 'phone',
  website: 'website',
  legal_entity_type: 'legal_entity_type',
  registration_number: 'registration_number',
  vat_number: 'vat_number',
  legal_address: 'legal_address',
  actual_address: 'actual_address',
  tax_country: 'tax_country',
  base_currency: 'base_currency',
  owner_id: 'owner_id',
  director_name: 'director_name',
  is_active: 'is_active',
  setup_completed: 'setup_completed',
  email_verified: 'email_verified',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Company_usersScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  user_id: 'user_id',
  role: 'role',
  permissions: 'permissions',
  is_active: 'is_active',
  joined_at: 'joined_at',
  updated_at: 'updated_at'
};

exports.Prisma.ClientsScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  name: 'name',
  abbreviation: 'abbreviation',
  code: 'code',
  email: 'email',
  phone: 'phone',
  fax: 'fax',
  website: 'website',
  contact_information: 'contact_information',
  role: 'role',
  is_juridical: 'is_juridical',
  is_active: 'is_active',
  is_foreigner: 'is_foreigner',
  country: 'country',
  legal_address: 'legal_address',
  actual_address: 'actual_address',
  business_license_code: 'business_license_code',
  vat_code: 'vat_code',
  vat_rate: 'vat_rate',
  eori_code: 'eori_code',
  foreign_taxpayer_code: 'foreign_taxpayer_code',
  registration_number: 'registration_number',
  credit_sum: 'credit_sum',
  pay_per: 'pay_per',
  currency: 'currency',
  payment_terms: 'payment_terms',
  automatic_debt_reminder: 'automatic_debt_reminder',
  registration_date: 'registration_date',
  date_of_birth: 'date_of_birth',
  sabis_customer_name: 'sabis_customer_name',
  sabis_customer_code: 'sabis_customer_code',
  additional_information: 'additional_information',
  notes: 'notes',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Client_addressesScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  address: 'address',
  city: 'city',
  country: 'country',
  postcode: 'postcode',
  employee_id: 'employee_id',
  is_registration: 'is_registration',
  is_correspondence: 'is_correspondence',
  is_load: 'is_load',
  is_unload: 'is_unload',
  is_department: 'is_department',
  name: 'name',
  description: 'description',
  notes: 'notes',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Client_bank_accountsScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  account_number: 'account_number',
  bank_name: 'bank_name',
  bank_code: 'bank_code',
  swift_code: 'swift_code',
  iban: 'iban',
  currency: 'currency',
  is_primary: 'is_primary',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProductsScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  code: 'code',
  name: 'name',
  description: 'description',
  unit: 'unit',
  price: 'price',
  cost_price: 'cost_price',
  currency: 'currency',
  vat_rate: 'vat_rate',
  category: 'category',
  subcategory: 'subcategory',
  min_stock: 'min_stock',
  current_stock: 'current_stock',
  is_active: 'is_active',
  is_service: 'is_service',
  batch_tracking: 'batch_tracking',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SalesScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  document_number: 'document_number',
  document_date: 'document_date',
  document_type: 'document_type',
  delivery_date: 'delivery_date',
  due_date: 'due_date',
  client_id: 'client_id',
  warehouse_id: 'warehouse_id',
  sales_manager_id: 'sales_manager_id',
  subtotal: 'subtotal',
  vat_amount: 'vat_amount',
  discount_amount: 'discount_amount',
  total_amount: 'total_amount',
  currency: 'currency',
  payment_status: 'payment_status',
  delivery_status: 'delivery_status',
  document_status: 'document_status',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_by: 'updated_by',
  updated_at: 'updated_at'
};

exports.Prisma.Sale_itemsScalarFieldEnum = {
  id: 'id',
  sale_id: 'sale_id',
  product_id: 'product_id',
  line_number: 'line_number',
  quantity: 'quantity',
  unit_price_base: 'unit_price_base',
  discount_percent: 'discount_percent',
  total_discount: 'total_discount',
  vat_rate: 'vat_rate',
  vat_amount: 'vat_amount',
  line_total: 'line_total',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PurchasesScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  document_number: 'document_number',
  document_date: 'document_date',
  operation_type: 'operation_type',
  supplier_id: 'supplier_id',
  warehouse_id: 'warehouse_id',
  purchase_manager_id: 'purchase_manager_id',
  subtotal: 'subtotal',
  vat_amount: 'vat_amount',
  total_amount: 'total_amount',
  currency: 'currency',
  payment_status: 'payment_status',
  delivery_status: 'delivery_status',
  document_status: 'document_status',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_by: 'updated_by',
  updated_at: 'updated_at'
};

exports.Prisma.Purchase_itemsScalarFieldEnum = {
  id: 'id',
  purchase_id: 'purchase_id',
  product_id: 'product_id',
  line_number: 'line_number',
  quantity: 'quantity',
  unit_price_base: 'unit_price_base',
  vat_rate: 'vat_rate',
  vat_amount: 'vat_amount',
  line_total: 'line_total',
  employee_id: 'employee_id',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.WarehousesScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  name: 'name',
  code: 'code',
  description: 'description',
  address: 'address',
  manager_id: 'manager_id',
  status: 'status',
  is_main: 'is_main',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Bank_operationsScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  doc_number: 'doc_number',
  operation_date: 'operation_date',
  amount: 'amount',
  currency: 'currency',
  type: 'type',
  description: 'description',
  client_id: 'client_id',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Chart_of_accountsScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  account_code: 'account_code',
  account_name: 'account_name',
  account_type: 'account_type',
  is_active: 'is_active',
  currency: 'currency',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Vat_classificationsScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  code: 'code',
  name: 'name',
  vat_rate: 'vat_rate',
  is_active: 'is_active'
};

exports.Prisma.Cost_centersScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  code: 'code',
  name: 'name',
  parent_id: 'parent_id',
  is_active: 'is_active'
};

exports.Prisma.Intrastat_codesScalarFieldEnum = {
  id: 'id',
  code_type: 'code_type',
  code: 'code',
  name: 'name',
  is_active: 'is_active'
};

exports.Prisma.Product_batchesScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  batch_number: 'batch_number',
  product_id: 'product_id',
  warehouse_id: 'warehouse_id',
  supplier_id: 'supplier_id',
  original_quantity: 'original_quantity',
  current_quantity: 'current_quantity',
  unit_cost: 'unit_cost',
  total_cost: 'total_cost',
  currency: 'currency',
  purchase_date: 'purchase_date',
  expiry_date: 'expiry_date',
  production_date: 'production_date',
  status: 'status',
  is_active: 'is_active',
  purchase_id: 'purchase_id',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Batch_movementsScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  batch_id: 'batch_id',
  movement_type: 'movement_type',
  quantity: 'quantity',
  unit_price: 'unit_price',
  reference_type: 'reference_type',
  reference_id: 'reference_id',
  description: 'description',
  notes: 'notes',
  movement_date: 'movement_date',
  created_by: 'created_by',
  created_at: 'created_at'
};

exports.Prisma.Accounting_entriesScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  entry_number: 'entry_number',
  entry_date: 'entry_date',
  amount: 'amount',
  currency: 'currency',
  account_debit: 'account_debit',
  account_credit: 'account_credit',
  description: 'description',
  notes: 'notes',
  reference_type: 'reference_type',
  reference_id: 'reference_id',
  product_id: 'product_id',
  warehouse_id: 'warehouse_id',
  client_id: 'client_id',
  batch_id: 'batch_id',
  is_automatic: 'is_automatic',
  created_by: 'created_by',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

exports.Currency = exports.$Enums.Currency = {
  EUR: 'EUR',
  USD: 'USD',
  AED: 'AED',
  UAH: 'UAH',
  GBP: 'GBP'
};

exports.CompanyUserRole = exports.$Enums.CompanyUserRole = {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  EMPLOYEE: 'EMPLOYEE',
  VIEWER: 'VIEWER'
};

exports.ClientRole = exports.$Enums.ClientRole = {
  CLIENT: 'CLIENT',
  SUPPLIER: 'SUPPLIER',
  BOTH: 'BOTH'
};

exports.SalesDocumentType = exports.$Enums.SalesDocumentType = {
  QUOTE: 'QUOTE',
  ORDER: 'ORDER',
  INVOICE: 'INVOICE',
  DELIVERY_NOTE: 'DELIVERY_NOTE',
  RECEIPT: 'RECEIPT'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PARTIAL: 'PARTIAL',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.DeliveryStatus = exports.$Enums.DeliveryStatus = {
  PENDING: 'PENDING',
  PARTIAL: 'PARTIAL',
  DELIVERED: 'DELIVERED',
  IN_TRANSIT: 'IN_TRANSIT',
  CANCELLED: 'CANCELLED'
};

exports.DocumentStatus = exports.$Enums.DocumentStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.PurchaseOperationType = exports.$Enums.PurchaseOperationType = {
  PURCHASE: 'PURCHASE',
  RETURN: 'RETURN',
  CORRECTION: 'CORRECTION',
  TRANSFER: 'TRANSFER'
};

exports.WarehouseStatus = exports.$Enums.WarehouseStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  MAINTENANCE: 'MAINTENANCE'
};

exports.BankOperationType = exports.$Enums.BankOperationType = {
  INCOME: 'INCOME',
  EXPENSE: 'EXPENSE',
  TRANSFER: 'TRANSFER'
};

exports.Prisma.ModelName = {
  users: 'users',
  companies: 'companies',
  company_users: 'company_users',
  clients: 'clients',
  client_addresses: 'client_addresses',
  client_bank_accounts: 'client_bank_accounts',
  products: 'products',
  sales: 'sales',
  sale_items: 'sale_items',
  purchases: 'purchases',
  purchase_items: 'purchase_items',
  warehouses: 'warehouses',
  bank_operations: 'bank_operations',
  chart_of_accounts: 'chart_of_accounts',
  vat_classifications: 'vat_classifications',
  cost_centers: 'cost_centers',
  intrastat_codes: 'intrastat_codes',
  product_batches: 'product_batches',
  batch_movements: 'batch_movements',
  accounting_entries: 'accounting_entries'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
