// üîÑ COPY EVERYTHING API - –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï
// ===================================================

// üì¶ 1. –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–•–û–î–ê –¢–û–í–ê–†–ê
app.post('/api/company/purchases/:id/copy', async (req, res) => {
  const { id } = req.params;
  
  try {
    const original = await prisma.purchases.findUnique({
      where: { id },
      include: { 
        items: { include: { product: true } },
        client: true,
        warehouse: true
      }
    });

    if (!original) {
      return res.status(404).json({ 
        success: false, 
        message: '–ü—Ä–∏—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å –°–ï–ì–û–î–ù–Ø–®–ù–ï–ô –î–ê–¢–û–ô
    const copy = await prisma.purchases.create({
      data: {
        // üìÖ –ì–õ–ê–í–ù–û–ï: –°–ï–ì–û–î–ù–Ø–®–ù–Ø–Ø –î–ê–¢–ê!
        date: new Date(),
        
        // üîÑ –ö–æ–ø–∏—Ä—É–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        client_id: original.client_id,
        warehouse_id: original.warehouse_id,
        responsible_id: req.user.id,
        status: 'DRAFT',
        total_amount: original.total_amount,
        notes: `–ö–æ–ø–∏—è –æ—Ç ${original.date.toLocaleDateString()}`,
        
        // üì¶ –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        items: {
          create: original.items.map(item => ({
            product_id: item.product_id,
            quantity: item.quantity,
            price: item.price,
            amount: item.amount
          }))
        }
      },
      include: {
        items: { include: { product: true } },
        client: true,
        warehouse: true
      }
    });

    res.json({
      success: true,
      message: '–ü—Ä–∏—Ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ –Ω—É–∂–Ω–æ',
      original_id: original.id,
      copy_id: copy.id,
      copy: copy,
      time_saved: '5 –º–∏–Ω—É—Ç'
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// üí∞ 2. –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –¢–û–í–ê–†–ê
app.post('/api/company/sales/:id/copy', async (req, res) => {
  const { id } = req.params;
  
  try {
    const original = await prisma.sales.findUnique({
      where: { id },
      include: { 
        items: { include: { product: true } },
        client: true,
        warehouse: true
      }
    });

    const copy = await prisma.sales.create({
      data: {
        // üìÖ –°–ï–ì–û–î–ù–Ø–®–ù–Ø–Ø –î–ê–¢–ê - –ö–õ–Æ–ß–ï–í–û–ï –û–¢–õ–ò–ß–ò–ï
        date: new Date(),
        
        client_id: original.client_id,
        warehouse_id: original.warehouse_id,
        responsible_id: req.user.id,
        status: 'DRAFT',
        total_amount: original.total_amount,
        notes: `–ö–æ–ø–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç ${original.date.toLocaleDateString()}`,
        
        items: {
          create: original.items.map(item => ({
            product_id: item.product_id,
            quantity: item.quantity,
            price: item.price,
            amount: item.amount
          }))
        }
      },
      include: {
        items: { include: { product: true } },
        client: true,
        warehouse: true
      }
    });

    res.json({
      success: true,
      message: '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!',
      copy: copy,
      time_saved: '5 –º–∏–Ω—É—Ç'
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// üí∏ 3. –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –û–ü–õ–ê–¢–´ –ü–û–°–¢–ê–í–©–ò–ö–£
app.post('/api/company/payments/suppliers/:id/copy', async (req, res) => {
  const { id } = req.params;
  
  try {
    const original = await prisma.payments.findUnique({
      where: { id },
      include: { 
        client: true,
        account: true 
      }
    });

    const copy = await prisma.payments.create({
      data: {
        // üìÖ –°–ï–ì–û–î–ù–Ø–®–ù–Ø–Ø –î–ê–¢–ê
        date: new Date(),
        
        type: 'SUPPLIER_PAYMENT',
        client_id: original.client_id,
        account_id: original.account_id,
        amount: original.amount,
        currency: original.currency,
        payment_method: original.payment_method,
        status: 'DRAFT',
        description: `–ö–æ–ø–∏—è –æ–ø–ª–∞—Ç—ã –æ—Ç ${original.date.toLocaleDateString()}`,
        reference: generatePaymentReference()
      },
      include: {
        client: true,
        account: true
      }
    });

    res.json({
      success: true,
      message: '–û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!',
      copy: copy
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// üí≥ 4. –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –û–ü–õ–ê–¢–´ –û–¢ –ü–û–ö–£–ü–ê–¢–ï–õ–Ø
app.post('/api/company/payments/customers/:id/copy', async (req, res) => {
  const { id } = req.params;
  
  try {
    const original = await prisma.payments.findUnique({
      where: { id },
      include: { 
        client: true,
        account: true 
      }
    });

    const copy = await prisma.payments.create({
      data: {
        // üìÖ –°–ï–ì–û–î–ù–Ø–®–ù–Ø–Ø –î–ê–¢–ê
        date: new Date(),
        
        type: 'CUSTOMER_PAYMENT',
        client_id: original.client_id,
        account_id: original.account_id,
        amount: original.amount,
        currency: original.currency,
        payment_method: original.payment_method,
        status: 'DRAFT',
        description: `–ö–æ–ø–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –æ—Ç ${original.date.toLocaleDateString()}`,
        reference: generatePaymentReference()
      },
      include: {
        client: true,
        account: true
      }
    });

    res.json({
      success: true,
      message: '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!',
      copy: copy
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// üéØ 5. –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –õ–Æ–ë–û–ì–û –î–û–ö–£–ú–ï–ù–¢–ê
app.post('/api/company/documents/:type/:id/copy', async (req, res) => {
  const { type, id } = req.params;
  
  try {
    let copyResult;
    
    switch (type) {
      case 'purchase':
        copyResult = await copyPurchase(id, req.user.id);
        break;
      case 'sale':
        copyResult = await copySale(id, req.user.id);
        break;
      case 'supplier-payment':
        copyResult = await copySupplierPayment(id, req.user.id);
        break;
      case 'customer-payment':
        copyResult = await copyCustomerPayment(id, req.user.id);
        break;
      default:
        return res.status(400).json({
          success: false,
          message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞'
        });
    }

    res.json({
      success: true,
      message: `${getDocumentName(type)} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!`,
      copy: copyResult,
      redirect_to: `/company/${type}s/${copyResult.id}/edit`
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// üìä 6. –ú–ê–°–°–û–í–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê
app.post('/api/company/balance/create-from-template', async (req, res) => {
  const { template_date, target_date } = req.body;
  
  try {
    const result = await prisma.$transaction(async (tx) => {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ —à–∞–±–ª–æ–Ω–Ω—É—é –¥–∞—Ç—É
      const templateOperations = await getOperationsForDate(template_date, req.user.company_id);
      
      const copiedOperations = {
        purchases: [],
        sales: [],
        payments: []
      };

      // –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–∏—Ö–æ–¥—ã
      for (const purchase of templateOperations.purchases) {
        const copy = await tx.purchases.create({
          data: {
            ...purchase,
            id: undefined, // –ù–æ–≤—ã–π ID
            date: new Date(target_date),
            status: 'DRAFT',
            items: {
              create: purchase.items.map(item => ({
                ...item,
                id: undefined
              }))
            }
          }
        });
        copiedOperations.purchases.push(copy);
      }

      // –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
      for (const sale of templateOperations.sales) {
        const copy = await tx.sales.create({
          data: {
            ...sale,
            id: undefined,
            date: new Date(target_date),
            status: 'DRAFT',
            items: {
              create: sale.items.map(item => ({
                ...item,
                id: undefined
              }))
            }
          }
        });
        copiedOperations.sales.push(copy);
      }

      // –ö–æ–ø–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–∏
      for (const payment of templateOperations.payments) {
        const copy = await tx.payments.create({
          data: {
            ...payment,
            id: undefined,
            date: new Date(target_date),
            status: 'DRAFT'
          }
        });
        copiedOperations.payments.push(copy);
      }

      return copiedOperations;
    });

    res.json({
      success: true,
      message: '–ë–∞–ª–∞–Ω—Å —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞!',
      template_date,
      target_date,
      copied: {
        purchases: result.purchases.length,
        sales: result.sales.length,
        payments: result.payments.length
      },
      time_saved: '2 —á–∞—Å–∞',
      operations: result
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
function generatePaymentReference() {
  return `PAY-${Date.now()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}`;
}

function getDocumentName(type) {
  const names = {
    'purchase': '–ü—Ä–∏—Ö–æ–¥',
    'sale': '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è',
    'supplier-payment': '–û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É',
    'customer-payment': '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è'
  };
  return names[type] || '–î–æ–∫—É–º–µ–Ω—Ç';
}

async function getOperationsForDate(date, companyId) {
  const startDate = new Date(date);
  startDate.setHours(0, 0, 0, 0);
  
  const endDate = new Date(date);
  endDate.setHours(23, 59, 59, 999);

  const [purchases, sales, payments] = await Promise.all([
    prisma.purchases.findMany({
      where: {
        company_id: companyId,
        date: { gte: startDate, lte: endDate }
      },
      include: { items: true }
    }),
    prisma.sales.findMany({
      where: {
        company_id: companyId,
        date: { gte: startDate, lte: endDate }
      },
      include: { items: true }
    }),
    prisma.payments.findMany({
      where: {
        company_id: companyId,
        date: { gte: startDate, lte: endDate }
      }
    })
  ]);

  return { purchases, sales, payments };
}

// üéä 7. –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í –î–õ–Ø –ë–´–°–¢–†–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø
app.get('/api/company/documents/copy-candidates', async (req, res) => {
  const { type, limit = 10 } = req.query;
  
  try {
    let documents = [];
    
    switch (type) {
      case 'purchases':
        documents = await prisma.purchases.findMany({
          where: { company_id: req.user.company_id },
          orderBy: { date: 'desc' },
          take: parseInt(limit),
          include: { client: true, warehouse: true }
        });
        break;
      case 'sales':
        documents = await prisma.sales.findMany({
          where: { company_id: req.user.company_id },
          orderBy: { date: 'desc' },
          take: parseInt(limit),
          include: { client: true, warehouse: true }
        });
        break;
      case 'payments':
        documents = await prisma.payments.findMany({
          where: { company_id: req.user.company_id },
          orderBy: { date: 'desc' },
          take: parseInt(limit),
          include: { client: true, account: true }
        });
        break;
    }

    res.json({
      success: true,
      documents: documents.map(doc => ({
        id: doc.id,
        date: doc.date,
        client_name: doc.client?.name,
        warehouse_name: doc.warehouse?.name,
        account_name: doc.account?.name,
        amount: doc.total_amount || doc.amount,
        status: doc.status,
        can_copy: true
      }))
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});